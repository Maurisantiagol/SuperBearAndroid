{"version":3,"file":"framework.umd.js","sources":["../src/hatch.ts","../src/default-domain.ts","../src/contract/index.ts","../src/browser-application.ts","../src/navigation.ts","../src/index.ts"],"sourcesContent":["import * as React from 'react';\nimport { Domain, Event, Store, combine, is } from 'effector';\nimport { MatchedRoute } from 'react-router-config';\n\nimport { defaultDomain } from './default-domain';\n\nconst HATCH = 'framework/page-hatch';\n\nexport interface HatchParams {\n  params: Record<string, string>;\n  query: Record<string, string>;\n}\n\n/**\n * Hatch is like a Gate, but just for models\n */\nexport interface Hatch {\n  // Called by history from withHatch\n  enter: Event<HatchParams>;\n  update: Event<HatchParams>;\n  exit: Event<void>;\n\n  $opened: Store<boolean>;\n  $params: Store<Record<string, string>>;\n  $query: Store<Record<string, string>>;\n\n  $props: Store<HatchParams>;\n}\n\ninterface Config {\n  enter: Event<HatchParams>;\n  update: Event<HatchParams>;\n  exit: Event<void>;\n  domain?: Domain;\n}\n\n/**\n * Events here is an input signal, history should call them when route enters, updates, and exits.\n * Stores is derived from this events and holds specific parameters\n * `$opened` holds current state of page, if user visited page but not left, it is `true`\n */\nexport function createHatch(config_: Config | Domain = defaultDomain): Hatch {\n  let domain;\n  let config: Partial<Config>;\n  if (is.domain(config_)) {\n    domain = config_;\n    config = {};\n  } else if (is.domain(config_.domain)) {\n    domain = config_.domain;\n    config = config_;\n  } else {\n    domain = defaultDomain;\n    config = {};\n  }\n\n  const $opened = domain.createStore(Boolean(false));\n  const $params = domain.createStore<Record<string, string>>({});\n  const $query = domain.createStore<Record<string, string>>({});\n\n  const hatch = {\n    enter: config.enter ?? domain.createEvent<HatchParams>(),\n    update: config.update ?? domain.createEvent<HatchParams>(),\n    exit: config.exit ?? domain.createEvent<void>(),\n    $opened,\n    $params,\n    $query,\n    $props: combine({ params: $params, query: $query }),\n  };\n\n  $params.on([hatch.enter, hatch.update], (_, { params }) => params);\n  $query.on([hatch.enter, hatch.update], (_, { query }) => query);\n\n  hatch.$opened.on(hatch.enter, () => Boolean(true)).reset(hatch.exit);\n  // Developer may want to read props when user leaves the page\n  // if $opened store will reset on hatch.exit, data will be deleted\n\n  return hatch;\n}\n\nexport function withHatch<C extends React.ComponentType>(hatch: Hatch, component: C): C {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (component as any)[HATCH] = hatch;\n  return component;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getHatch<T extends React.ComponentType<any>>(component: T): Hatch | undefined {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (component as any)[HATCH];\n}\n\nexport function lookupHatch<P>(match: MatchedRoute<P>): Hatch | undefined {\n  if (match.route.component) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return getHatch(match.route.component as any);\n  }\n}\n","import { createDomain } from 'effector';\n\nexport const defaultDomain = createDomain('framework/default');\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Unit, forward, is } from 'effector';\n\ntype KeysOfEffectorApi<API> = {\n  [KEY in keyof API]: API[KEY] extends Unit<any> ? KEY : never;\n}[keyof API];\n\nexport function contract<\n  Properties extends string,\n  Page extends Record<Properties, unknown>\n>(config: { page: Page; model: Pick<Page, KeysOfEffectorApi<Page>> }) {\n  for (const name in config.page) {\n    const pageUnit = config.page[name];\n\n    // Workaround for typescript\n    // We're already proofed by type system that user should pass\n    // each property to model object for page API.\n    // Each property that don't implements Effector API must be excluded\n    const modelUnit = (config.model as Page)[name];\n\n    // Typically we can import page like this:\n    // import * as page from './page'\n    // And there will be React-component in the list of properties\n    // is.unit omit it\n    if (pageUnit && modelUnit && is.unit(pageUnit) && is.unit(modelUnit)) {\n      // Stores has an unique data flow: from model to page\n      // When store in the model is changed, we want to change the store in the page too\n      // But we don't want to change store from the page's code\n      if (is.store(pageUnit) && is.store(modelUnit)) {\n        forward({ from: modelUnit, to: pageUnit });\n\n        pageUnit.defaultState = modelUnit.defaultState;\n\n        // Change current state\n        (pageUnit as any).stateRef.current = (modelUnit as any).stateRef.current;\n\n        // Change initial state inside scope\n        // https://t.me/c/1489066599/4652\n        (pageUnit as any).stateRef.before = [\n          {\n            type: 'map',\n            fn: (state: unknown) => state,\n            from: (modelUnit as any).stateRef,\n          },\n        ];\n      }\n      // Typical data flow: from page to model\n      // When something happened in the page (event is triggered)\n      // We want to trigger the same event in the model to start our logic\n      // But model can trigger the event too\n      // Typically we don't want to subscribe to events in the page\n      else {\n        forward({ from: pageUnit, to: modelUnit });\n      }\n    }\n  }\n}\n","import { Domain, Event, combine, forward, guard } from 'effector';\nimport { RouteConfig, matchRoutes } from 'react-router-config';\nimport { splitMap } from 'patronum';\n\nimport { HatchParams, getHatch } from './hatch';\nimport { createNavigation } from './navigation';\nimport { defaultDomain } from './default-domain';\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function createBrowserApplication(config: {\n  ready: Event<void>;\n  routes: RouteConfig[];\n  domain?: Domain;\n}) {\n  const domain = config.domain || defaultDomain;\n  const navigation = createNavigation(domain, { emitHistory: true });\n  forward({ from: config.ready, to: navigation.historyEmitCurrent });\n\n  const routeResolved = navigation.historyChanged.filterMap((change) => {\n    const routes = matchRoutes(config.routes, change.pathname);\n\n    if (routes.length > 0) {\n      return {\n        ...routes[0],\n        change,\n      };\n    }\n  });\n\n  for (const { component, path } of config.routes) {\n    if (!component) continue;\n    if ((component as any).load) {\n      throw new Error(\n        `[${path}] lazy components temporary is not supported. Please, remove loadable() call`,\n      );\n    }\n\n    const { routeMatched, __: notMatched } = splitMap({\n      source: routeResolved,\n      cases: {\n        routeMatched: ({ route, match, change }) => {\n          if (route.path === path) {\n            return {\n              // route.path contains params, like /user/:userId\n              // :userId is a param\n              // match.params contains parsed params values\n              // /user/123 will be parsed as { userId: 123 }\n              params: match.params,\n              query: Object.fromEntries(new URLSearchParams(change.search)),\n            };\n          }\n          return undefined;\n        },\n      },\n    });\n\n    const hatchEnter = domain.createEvent<HatchParams>({ name: `hatchEnter:${path}` });\n    const hatchUpdate = domain.createEvent<HatchParams>({ name: `hatchUpdate:${path}` });\n    const hatchExit = domain.createEvent<void>({ name: `hatchExit:${path}` });\n\n    const componentHatch = getHatch(component);\n    if (componentHatch) {\n      forward({ from: hatchEnter, to: componentHatch.enter });\n      forward({ from: hatchUpdate, to: componentHatch.update });\n      forward({ from: hatchExit, to: componentHatch.exit });\n    }\n\n    // Shows that user is on the route\n    const $onRoute = domain.createStore(false, { name: `$onRoute:${path}` });\n\n    // Shows that user visited route and waited for page\n    // If true, page.hatch.enter is triggered and logic was run\n    const $onPage = domain.createStore(false, { name: `$onPage:${path}` });\n\n    //#region route matched\n    $onRoute.on(routeMatched, () => true);\n\n    guard({\n      clock: routeMatched,\n      filter: $onPage,\n      target: hatchUpdate,\n    });\n\n    guard({\n      clock: routeMatched,\n      filter: combine($onPage, $onRoute, (page, route) => !page && route),\n      target: hatchEnter,\n    });\n\n    $onPage.on(hatchEnter, () => true);\n    //#endregion route matched\n\n    //#region NOT matched\n    $onRoute.on(notMatched, () => false);\n\n    guard({\n      clock: notMatched,\n      filter: $onPage,\n      target: hatchExit,\n    });\n\n    $onPage.on(hatchExit, () => false);\n    //#endregion NOT matched\n  }\n\n  return { navigation };\n}\n","import { Domain, merge, sample, scopeBind } from 'effector';\nimport { createBrowserHistory, createMemoryHistory } from 'history';\n\nexport interface HistoryChange {\n  pathname: string;\n  hash: string;\n  search: string;\n  action: 'PUSH' | 'POP' | 'REPLACE';\n}\n\nexport function createNavigation(\n  domain: Domain,\n  { emitHistory = false, trackRedirects = false } = {},\n) {\n  const history = typeof document !== 'undefined' ? createBrowserHistory() : createMemoryHistory();\n\n  const historyPush = domain.createEffect<string, void>(() => {});\n  const historyPushSearch = domain.createEffect<string, void>(() => {});\n  const historyReplace = domain.createEffect<string, void>(() => {});\n\n  const historyChanged = domain.createEvent<HistoryChange>();\n\n  const historyEmitCurrent = domain.createEvent();\n\n  const $redirectTo = domain.createStore('');\n\n  // do not actual change history, just trigger history changed with correct arguments\n  sample({\n    clock: historyEmitCurrent,\n    fn: () =>\n      ({\n        action: 'REPLACE',\n        hash: history.location.hash,\n        pathname: history.location.pathname,\n        search: history.location.search,\n      } as HistoryChange),\n    target: historyChanged,\n  });\n\n  if (emitHistory) {\n    historyPush.use((url) => history.push(url));\n    historyReplace.use((url) => history.replace(url));\n    historyPushSearch.use((search) => history.push({ search }));\n\n    historyEmitCurrent.watch(() => {\n      let historyChangedBound: (payload: HistoryChange) => void;\n      try {\n        historyChangedBound = scopeBind(historyChanged);\n      } catch (_) {\n        historyChangedBound = (p) => historyChanged(p);\n      }\n\n      history.listen(({ pathname, search, hash }, action) => {\n        historyChangedBound({ pathname, search, hash, action });\n      });\n    });\n  }\n\n  if (trackRedirects) {\n    $redirectTo.on([historyPush, historyReplace], (_, url) => url);\n    if (emitHistory) {\n      $redirectTo.on(historyChanged, (_, { pathname, search }) => `${pathname}?${search}`);\n    }\n  }\n\n  return {\n    history,\n    historyPush,\n    historyPushSearch,\n    historyReplace,\n    historyChanged,\n    historyEmitCurrent,\n    $redirectTo,\n  };\n}\n","import loadable from '@loadable/component';\nimport { RouteConfig, renderRoutes } from 'react-router-config';\n\nexport { createBrowserApplication } from './browser-application';\nexport { createHatch, getHatch, withHatch, lookupHatch } from './hatch';\nexport type { Hatch, HatchParams } from './hatch';\n\nexport { contract } from './contract';\n\nexport const createPages = (routes: RouteConfig[]) => renderRoutes(routes);\n\nexport { loadable };\nexport type { RouteConfig };\n"],"names":["getHatch","component","HATCH","defaultDomain","createDomain","config","name","page","pageUnit","modelUnit","model","is","unit","store","forward","from","to","defaultState","stateRef","current","before","type","fn","state","domain","navigation","emitHistory","trackRedirects","history","document","createBrowserHistory","createMemoryHistory","historyPush","createEffect","historyPushSearch","historyReplace","historyChanged","createEvent","historyEmitCurrent","$redirectTo","createStore","sample","clock","action","hash","location","pathname","search","target","use","url","push","replace","watch","historyChangedBound","scopeBind","_","p","listen","on","createNavigation","ready","routeResolved","filterMap","change","routes","matchRoutes","length","path","load","Error","routeMatched","__","notMatched","splitMap","source","cases","route","match","params","query","Object","fromEntries","URLSearchParams","hatchEnter","hatchUpdate","hatchExit","componentHatch","enter","update","exit","$onRoute","$onPage","guard","filter","combine","config_","$opened","Boolean","$params","$query","hatch","$props","reset","renderRoutes"],"mappings":"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"}