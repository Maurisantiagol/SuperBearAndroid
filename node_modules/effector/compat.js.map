{"version":3,"file":"compat.js","sources":["effector/collection.ts","effector/throw.ts","effector/region.ts","effector/createNode.ts","effector/tag.ts","effector/kernel.ts","effector/naming.ts","effector/config.ts","effector/template.ts","effector/createUnit.ts","effector/combine.ts","effector/defer.ts","effector/createEffect.ts","effector/merge.ts","effector/sample.ts","effector/fork/util.ts","effector/observable.ts","effector/validate.ts","effector/getter.ts","effector/id.ts","effector/own.ts","effector/is.ts","effector/caller.ts","effector/step.ts","effector/stateRef.ts","effector/clearNode.ts","effector/subscription.ts","effector/forward.ts","effector/watch.ts","effector/split.ts","effector/fork/allSettled.ts","effector/attach.ts","effector/createApi.ts","effector/createDomain.ts","effector/fork/fork.ts","effector/fork/createScope.ts","effector/fromObservable.ts","effector/guard.ts","effector/fork/hydrate.ts","effector/restore.ts","effector/fork/scopeBind.ts","effector/fork/serialize.ts"],"sourcesContent":["export function forIn<T>(\n  obj: Record<string, T>,\n  cb: (value: T, key: string) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = <T>(list: T[], item: T) => list.includes(item)\n\nexport const removeItem = <T>(list: T[], item: T) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list, fn: Function) {\n  list.forEach(fn)\n}\n","export function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: unknown,\n  subject: string,\n  suggestion?: string,\n) =>\n  !condition &&\n  console.error(\n    `${subject} is deprecated${\n      suggestion ? `, use ${suggestion} instead` : ''\n    }`,\n  )\n","import {getParent, getMeta} from './getter'\nimport {createNode} from './createNode'\nimport type {Template} from '../forest/index.h'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value\n  template\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}|${sid}`\n  return sid\n}\n\nexport function withRegion(unit, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: getMeta(unit, 'template') || readTemplate(),\n    sidRoot: getMeta(unit, 'sidRoot') || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {sidRoot: readSidRoot(sid), name, loc, method},\n  })\n  return withRegion(sidNode, fn)\n}\n","import type {Node, NodeUnit, Cmd} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\nimport {add, forEach} from './collection'\n\nexport const arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]}\n  meta?: {[name: string]}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  forEach(node, item => item && add(seq, item))\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  forEach(links, link => add(getOwners(link), result))\n  forEach(owners, owner => add(getLinks(owner), result))\n  forEach(sources, source => add(source.next, result))\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import type {Leaf} from '../forest/index.h'\n\nimport type {Node, NodeUnit, StateRef} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {STORE, EFFECT, SAMPLER, STACK, BARRIER, VALUE, REG_A, MAP} from './tag'\nimport type {Scope} from './unit.h'\nimport {add, forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'read' | 'barrier' | 'sampler' | 'effect'\n\nexport type BarrierPriorityTag = 'read' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Call stack */\nexport type Stack = {\n  value\n  a\n  b\n  c?\n  parent: Stack | null\n  node: Node\n  page: Leaf | null\n  scope?: Scope | null | void\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (a.v.type === b.v.type && a.v.id > b.v.id) ||\n    /**\n     * greater priority mean bucket of first node is executed later\n     * e.g  a: \"sampler\", b: \"barrier\"\n     */\n    getPriority(a.v.type) > getPriority(b.v.type)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 6) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  add(queue, {first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 6; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * bucket 3 is for \"barrier\" PriorityType (used in combine)\n       * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 3 || i === 4) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value,\n  scope?: Scope | null | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      scope,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * bucket 3 is for \"barrier\" PriorityType (used in combine)\n   * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 3 || priority === 4) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'read':\n      return 2\n    case BARRIER:\n      return 3\n    case SAMPLER:\n      return 4\n    case EFFECT:\n      return 5\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let isPure = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?\n  defer?: boolean\n  page?: Leaf | void | null\n  scope?: Scope | void\n  stack?: Stack | void\n}): void\nexport function launch(unit: NodeUnit, payload?, upsert?: boolean): void\nexport function launch(unit, payload?, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {\n    isRoot,\n    currentPage,\n    scope: forkPage,\n    isWatch,\n    isPure,\n  }\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value: Layer | undefined\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      if (step.order) {\n        const {priority, barrierID} = step.order\n        const id = barrierID\n          ? page\n            ? `${page.fullID}_${barrierID}`\n            : barrierID\n          : 0\n        if (stepn !== idx || type !== priority) {\n          if (barrierID) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n          } else {\n            pushHeap(stepn, stack, priority)\n          }\n          continue kernelLoop\n        }\n        barrierID && barriers.delete(id)\n      }\n      switch (step.type) {\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'compute':\n          const data = step.data\n          if (data.fn) {\n            isWatch = getMeta(node, 'op') === 'watch'\n            isPure = data.pure\n            const computationResult = data.safe\n              ? (0 as any, data.fn)(getValue(stack), local.scope, stack)\n              : tryRun(local, data.fn, stack)\n            if (data.filter) {\n              /**\n               * handled edge case: if step.fn will throw,\n               * tryRun will return null\n               * thereby forcing that branch to stop\n               */\n              skip = !computationResult\n            } else {\n              stack.value = computationResult\n            }\n            isWatch = lastStartedState.isWatch\n            isPure = lastStartedState.isPure\n          }\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      const finalValue = getValue(stack)\n      forEach(node.next, nextNode => {\n        pushFirstHeapItem(\n          'child',\n          page,\n          nextNode,\n          stack,\n          finalValue,\n          getForkPage(stack),\n        )\n      })\n      const forkPage = getForkPage(stack)\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.fxCount,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          forEach(additionalLinks, nextNode => {\n            pushFirstHeapItem(\n              'child',\n              page,\n              nextNode,\n              stack,\n              finalValue,\n              forkPage,\n            )\n          })\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nexport const initRefInScope = (\n  scope: {\n    reg: Record<string, StateRef>\n    sidValuesMap: Record<string, any>\n    sidIdMap: Record<string, string>\n  },\n  sourceRef: StateRef,\n  isGetState?: boolean,\n  isKernelCall?: boolean,\n  softRead?: boolean,\n) => {\n  const refsMap = scope.reg\n  const sid = sourceRef.sid\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n  }\n\n  if (sid && sid in scope.sidValuesMap && !(sid in scope.sidIdMap)) {\n    ref.current = scope.sidValuesMap[sid]\n  } else {\n    if (sourceRef.before && !softRead) {\n      let isFresh = false\n      const needToAssign = isGetState || !sourceRef.noInit || isKernelCall\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState, isKernelCall)\n              const value = from && refsMap[from.id].current\n              if (needToAssign) {\n                ref.current = cmd.fn ? cmd.fn(value) : value\n              }\n            }\n            break\n          }\n          case 'field': {\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            initRefInScope(scope, cmd.from, isGetState, isKernelCall)\n            if (needToAssign) {\n              const from = refsMap[cmd.from.id]\n              ref.current[cmd.field] = refsMap[from.id].current\n            }\n            break\n          }\n          // case 'closure':\n          //   break\n        }\n      })\n    }\n  }\n  if (sid) scope.sidIdMap[sid] = sourceRef.id\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, fn: Function, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import type {Store, CommonUnit, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent, getCompositeName} from './getter'\nimport {forIn} from './collection'\n\nexport function unitObjectName(objOrArr, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, unit => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit)\n          ? getCompositeName(unit as CommonUnit | Domain).fullName\n          : unit.toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompositeName(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompositeName(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n","import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args): [any[], any | void]\nexport function processArgsToConfig(\n  args,\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  const childConfig = rawConfig.and\n  if (childConfig) {\n    const unwrappedNestedValue = singleArgument ? childConfig : childConfig[0]\n    /**\n     * if there is no \"and\" field then we reached the leaf of the tree\n     * and this is an original user-defined argument\n     *\n     * note that in this case we're returning all arguments, not the only one been unwrapped\n     **/\n    if (!isObject(unwrappedNestedValue) || !('and' in unwrappedNestedValue)) {\n      args = childConfig\n    } else {\n      //@ts-expect-error\n      const nested = processArgsToConfig(childConfig, singleArgument)\n\n      args = nested[0]\n      metadata = {...metadata, ...nested[1]}\n    }\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part, config = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n","import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn = template.handlers[method]\n    if (fn) return fn(template, ...args)\n  }\n}\n","import {observableSymbol} from './observable'\n\nimport {\n  is,\n  isObject,\n  isFunction,\n  assertObject,\n  assertNodeSet,\n  isVoid,\n} from './is'\nimport type {Store, Event, CommonUnit, Effect} from './unit.h'\n\nimport {calc, mov, read, userFnCall} from './step'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n  isPure,\n} from './kernel'\n\nimport type {Subscriber, Config} from './index.h'\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getStoreState,\n  getGraph,\n  getParent,\n  setMeta,\n  getMeta,\n} from './getter'\nimport {assert, deprecate} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, STACK, REG_A} from './tag'\nimport {applyTemplate} from './template'\nimport {forEach} from './collection'\nimport {flattenConfig} from './config'\nimport type {Template} from '../forest/index.h'\n\nexport const applyParentHook = (\n  source,\n  target,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nexport const initUnit = (kind, unit, configA, configB?) => {\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  const config = flattenConfig({\n    or: configB,\n    and: typeof configA === 'string' ? {name: configA} : configA,\n  })\n  const {parent = null, sid = null, named = null} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n  const meta: Record<string, any> = {\n    op: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n    serialize: config.serialize,\n    derived: config.derived,\n    config,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => {\n    deprecate(false, 'thru', 'js pipe')\n    return fn(unit)\n  }\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : upd => observer.next && observer.next(upd),\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (event, op: string, fn, node) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = fn.fn\n  }\n  const mapped = createEvent({\n    name: `${event.shortName} → *`,\n    derived: true,\n    and: config,\n  })\n  createLinkNode(event, mapped, node, op, fn)\n  return mapped\n}\n\nfunction callCreate<T>(\n  unit: Event<T> | Effect<T, any, any>,\n  template: Template | null,\n  payload: T,\n  args: any[],\n) {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?,\n  maybeConfig?,\n): Event<Payload> {\n  const event = ((payload: Payload, ...args: unknown[]) => {\n    deprecate(\n      !getMeta(event, 'derived'),\n      'call of derived event',\n      'createEvent',\n    )\n    deprecate(!isPure, 'unit call from pure function', 'operators like sample')\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }) as Event<Payload>\n  const template = readTemplate()\n  return Object.assign(event, {\n    graphite: createNode({\n      meta: initUnit(EVENT, event, nameOrConfig, maybeConfig),\n      regional: true,\n    }),\n    create(params: Payload, _: any[]) {\n      launch({target: event, params, scope: forkPage!})\n      return params\n    },\n    watch: (fn: (payload: Payload) => any) => watchUnit(event, fn),\n    map: (fn: Function) => deriveEvent(event, MAP, fn, [userFnCall()]),\n    filter: (fn: {fn: Function}) =>\n      deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [\n        userFnCall(callStack, true),\n      ]),\n    filterMap: (fn: Function) =>\n      deriveEvent(event, 'filterMap', fn, [\n        userFnCall(),\n        calc(value => !isVoid(value), true),\n      ]),\n    prepend(fn: Function) {\n      const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n        parent: getParent(event),\n      })\n      applyTemplate('eventPrepend', getGraph(contramapped))\n      createLinkNode(contramapped, event, [userFnCall()], 'prepend', fn)\n      applyParentHook(event, contramapped)\n      return contramapped\n    },\n  })\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const plainState = createStateRef(defaultState)\n  const updates = createNamedEvent('updates')\n  applyTemplate('storeBase', plainState)\n  const plainStateId = plainState.id\n  const store = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState: (state: State) =>\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        scope: forkPage!,\n      }),\n    reset(...units: CommonUnit[]) {\n      forEach(units, unit => store.on(unit, () => store.defaultState))\n      return store\n    },\n    on(nodeSet: CommonUnit | CommonUnit[], fn: Function) {\n      assertNodeSet(nodeSet, '.on', 'first argument')\n      deprecate(\n        !getMeta(store, 'derived'),\n        '.on in derived store',\n        'createStore',\n      )\n      forEach(Array.isArray(nodeSet) ? nodeSet : [nodeSet], trigger => {\n        store.off(trigger)\n        getSubscribers(store).set(\n          trigger,\n          createSubscription(\n            updateStore(trigger, store, 'on', callARegStack, fn),\n          ),\n        )\n      })\n      return store\n    },\n    off(unit: CommonUnit) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: (value: any, prevArg?: any) => any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = (fn as unknown as {fn: (value: any) => any}).fn\n      }\n      deprecate(\n        isVoid(firstState),\n        'second argument of store.map',\n        'updateFilter',\n      )\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (!isVoid(storeState)) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        derived: true,\n        and: config,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, callStackAReg, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      assert(isFunction(fn), 'second argument should be a function')\n      return eventOrFn.watch(payload => fn(store.getState(), payload))\n    },\n  } as unknown as Store<State>\n  const meta = initUnit(STORE, store, props)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState, fn: updateFilter},\n    node: [\n      calc((upd, _, stack) => {\n        if (stack.scope && !stack.scope.reg[plainState.id]) {\n          stack.b = true\n        }\n        return upd\n      }),\n      read(plainState),\n      calc((upd, _, {a, b}) => !isVoid(upd) && (upd !== a || b), true),\n      updateFilter && userFnCall(callStackAReg, true),\n      mov({from: STACK, target: plainState}),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  const sid: string | null = getMeta(store, 'sid')\n  if (sid) {\n    if (getMeta(store, 'serialize') !== 'ignore')\n      setMeta(store, 'storeChange', true)\n    plainState.sid = sid\n  }\n  assert(\n    getMeta(store, 'derived') || !isVoid(defaultState),\n    \"current state can't be undefined, use null instead\",\n  )\n  own(store, [updates])\n  return store\n}\n\nconst updateStore = (\n  from: CommonUnit,\n  store: Store<any>,\n  op: string,\n  caller: typeof callStackAReg,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const reader = mov({\n    store: storeRef,\n    to: REG_A,\n    priority: 'read',\n  })\n  if (op === MAP) reader.data.softRead = true\n  const node = [reader, userFnCall(caller)]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, node, op, fn)\n}\n","import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {mov, calc, read, userFnCall} from './step'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject, isVoid} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {assert, deprecate} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport type {Config} from './index.h'\n\nexport function combine(...args): Store<any> {\n  let handler\n  let stores\n  let config\n  ;[args, config] = processArgsToConfig(args)\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = list => fn(...list)\n    }\n  }\n  assert(isObject(structStoreShape), 'shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj,\n  config?: Config,\n  fn?: (upd) => any,\n) => {\n  const clone = isArray ? list => list.slice() : obj => ({...obj})\n  const defaultState = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: unitObjectName(obj),\n    derived: true,\n    and: config,\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const rawShapeReader = read(rawShape)\n  /**\n   * usual ref reading has very high priority, which leads to data races\n   * ref reading for combine should have same \"barrier\" priority but without batching\n   * (thats why order has no \"barrierID\" field, which assume batching)\n   **/\n  rawShapeReader.order = {priority: 'barrier'}\n  const node = [\n    calc((upd, _, stack) => {\n      if (stack.scope && !stack.scope.reg[rawShape.id]) {\n        stack.c = true\n      }\n      return upd\n    }),\n    rawShapeReader,\n    mov({store: isFresh, to: 'b'}),\n    calc((upd, {key}, reg) => {\n      if (reg.c || upd !== reg.a[key]) {\n        if (needSpread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n        return true\n      }\n    }, true),\n    mov({from: REG_A, target: rawShape}),\n    mov({from: VALUE, store: false, target: isFresh}),\n    mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n      priority: BARRIER,\n      batch: true,\n    }),\n    read(rawShape, true),\n    fn && userFnCall(),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      assert(\n        !is.unit(child) && !isVoid(child),\n        `combine expects a store in a field ${key}`,\n      )\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, node, 'combine', fn)\n    linkNode.scope.key = key\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {type: 'field', field: key, from: childRef})\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args) {\n  deprecate(false, 'createStoreObject', 'combine')\n  return combine(...args)\n}\n","export function createDefer(): {\n  rs: (value) => any\n  rj: (value) => any\n  req: Promise<any>\n} {\n  const result = {} as {\n    rs: (value) => any\n    rj: (value) => any\n    req: Promise<any>\n  }\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(err => {})\n  return result\n}\n","import type {Unit} from './index.h'\nimport type {Effect} from './unit.h'\nimport {calc, run} from './step'\nimport {getForkPage, getGraph, getMeta, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch, Stack} from './kernel'\nimport {createNamedEvent, createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {assert} from './throw'\nimport {EFFECT} from './tag'\nimport {add} from './collection'\n\nexport function createEffect<Payload, Done, Fail = Error>(\n  nameOrConfig,\n  maybeConfig?,\n): Effect<Payload, Done, Fail> {\n  const instance = createEvent(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  ) as unknown as Effect<Payload, Done, Fail>\n  const node = getGraph(instance)\n  setMeta(node, 'op', (instance.kind = EFFECT))\n  //@ts-expect-error\n  instance.use = (fn: Function) => {\n    assert(isFunction(fn), '.use argument should be a function')\n    runner.scope.handler = fn\n    return instance\n  }\n  instance.use.getCurrent = () => runner.scope.handler\n  const anyway = (instance.finally = createNamedEvent('finally'))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({status, params, result}) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({status, params, error}) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}) => error,\n  }))\n\n  const runner = createNode({\n    scope: {\n      handlerId: getMeta(node, 'sid'),\n      handler:\n        instance.defaultConfig.handler ||\n        (() => assert(false, `no handler used in ${instance.getType()}`)),\n    },\n    node: [\n      calc(\n        (upd, scope_, stack) => {\n          const scope: {handlerId: string; handler: Function} = scope_ as any\n          let handler = scope.handler\n          if (getForkPage(stack)) {\n            const handler_ = getForkPage(stack)!.handlers[scope.handlerId]\n            if (handler_) handler = handler_\n          }\n          upd.handler = handler\n          return upd\n        },\n        false,\n        true,\n      ),\n      calc(\n        ({params, req, handler, args = [params]}, _, stack) => {\n          const onResolve = onSettled(params, req, true, anyway, stack)\n          const onReject = onSettled(params, req, false, anyway, stack)\n          const [ok, result] = runFn(handler, onReject, args)\n          if (ok) {\n            if (isObject(result) && isFunction(result.then)) {\n              result.then(onResolve, onReject)\n            } else {\n              onResolve(result)\n            }\n          }\n        },\n        false,\n        true,\n      ),\n    ],\n    meta: {op: 'fx', fx: 'runner'},\n  })\n  node.scope.runner = runner\n  add(\n    node.seq,\n    calc(\n      (params, {runner}, stack) => {\n        const upd = getParent(stack)\n          ? {params, req: {rs(data) {}, rj(data) {}}}\n          : /** empty stack means that this node was launched directly */\n            params\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          scope: getForkPage(stack),\n        })\n        return upd.params\n      },\n      false,\n      true,\n    ),\n  )\n  //@ts-expect-error\n  instance.create = (params: Payload) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n      launch({target: instance, params: payload, scope: forkPage})\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {named: 'inFlight'})\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1))\n  setMeta(anyway, 'needFxCounter', 'dec')\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-expect-error\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [anyway, done, fail, doneData, failData, pending, inFlight])\n  return instance\n}\nexport const runFn = (\n  fn: Function,\n  onReject: (data) => void,\n  args,\n): [boolean, any] => {\n  try {\n    return [true, fn(...args)]\n  } catch (err) {\n    onReject(err)\n    return [false, null]\n  }\n}\n\nexport const onSettled =\n  (\n    params,\n    req: {\n      rs(_)\n      rj(_)\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n  ) =>\n  data =>\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {status: 'done', params, result: data}\n          : {status: 'fail', params, error: data},\n        {value: data, fn: ok ? req.rs : req.rj},\n      ],\n      defer: true,\n      page: stack.page,\n      scope: getForkPage(stack),\n    })\n\nconst sidechain = createNode({\n  node: [run({fn: ({fn, value}) => fn(value)})],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import type {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  units: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  assertNodeSet(units, 'merge', 'first argument')\n  const result = createEvent({\n    name: unitObjectName(units, 'merge'),\n    derived: true,\n    and: config,\n  })\n  createLinkNode(units, result, [], 'merge')\n  return result\n}\n","import type {Cmd, StateRef} from './index.h'\nimport type {CommonUnit, DataCarrier} from './unit.h'\nimport {combine} from './combine'\nimport {mov, userFnCall, read, calc} from './step'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {\n  assertNodeSet,\n  assertTarget,\n  is,\n  isObject,\n  isVoid,\n  isFunction,\n} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\nimport {forEach} from './collection'\nimport {SAMPLE, STACK, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\nimport {own} from './own'\nimport {createLinkNode} from './forward'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nconst fieldErrorMessage = (method: string, field: string) =>\n  method + `: ${field} should be defined`\n\nexport function validateSampleConfig(config, method: string) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      assert(config[field] != null, fieldErrorMessage(method, field))\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args) {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let batched = true\n  let filter\n  /** config case */\n  if (\n    isVoid(clock) &&\n    isObject(source) &&\n    validateSampleConfig(source, SAMPLE)\n  ) {\n    clock = source.clock\n    fn = source.fn\n    batched = !source.greedy\n    filter = source.filter\n    /** optional target & name accepted only from config */\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  return createSampling(\n    SAMPLE,\n    clock,\n    source,\n    filter,\n    target,\n    fn,\n    name,\n    metadata,\n    batched,\n    true,\n    false,\n    sid,\n  )\n}\n\nexport const createSampling = (\n  method: string,\n  clock: DataCarrier | DataCarrier[] | void,\n  source: DataCarrier | Array<Store<any>> | Record<string, Store<any>> | void,\n  filter: any,\n  target: DataCarrier | DataCarrier[] | void,\n  fn: any,\n  name: string | undefined,\n  metadata: object | void,\n  batched: boolean,\n  targetMayBeStore: boolean,\n  filterRequired: boolean,\n  sid?: string | undefined,\n) => {\n  const isUpward = !!target\n  assert(\n    !isVoid(source) || !isVoid(clock),\n    fieldErrorMessage(method, 'either source or clock'),\n  )\n  let sourceIsClock = false\n  if (isVoid(source)) {\n    sourceIsClock = true\n  } else if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (isVoid(clock)) {\n    /** still undefined! */\n    clock = source\n  } else {\n    assertNodeSet(clock, method, 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock as CommonUnit[])\n    }\n  }\n  if (sourceIsClock) {\n    source = clock\n  }\n  if (!metadata && !name) name = source.shortName\n  let filterType: 'none' | 'unit' | 'fn' = 'none'\n  if (filterRequired || filter) {\n    if (is.unit(filter)) {\n      filterType = 'unit'\n    } else {\n      assert(isFunction(filter), '`filter` should be function or unit')\n      filterType = 'fn'\n    }\n  }\n  if (target) {\n    assertNodeSet(target, method, 'target')\n    assertTarget(method, target)\n  } else {\n    if (\n      filterType === 'none' &&\n      targetMayBeStore &&\n      is.store(source) &&\n      is.store(clock)\n    ) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      target = createStore(initialState, {name, sid, or: metadata})\n    } else {\n      target = createEvent({name, derived: true, or: metadata})\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  const clockState = createStateRef()\n  let filterNodes: Cmd[] = []\n  if (filterType === 'unit') {\n    const [filterRef, hasFilter] = syncSourceState(\n      filter as DataCarrier,\n      target,\n      clock,\n      clockState,\n      method,\n    )\n    filterNodes = [...readAndFilter(hasFilter), ...readAndFilter(filterRef)]\n  }\n  const [sourceRef, hasSource] = syncSourceState(\n    source,\n    target,\n    clock,\n    clockState,\n    method,\n  )\n  own(source, [\n    createLinkNode(\n      clock,\n      target,\n      [\n        applyTemplate('sampleSourceLoader'),\n        mov({from: STACK, target: clockState}),\n        ...readAndFilter(hasSource),\n        read(sourceRef, true, batched),\n        ...filterNodes,\n        read(clockState),\n        filterType === 'fn' &&\n          userFnCall((src, _, {a}) => filter(src, a), true),\n        fn && userFnCall(callStackAReg),\n        applyTemplate('sampleSourceUpward', isUpward),\n      ],\n      method,\n      fn,\n    ),\n  ])\n  return target\n}\n\nconst readAndFilter = (state: StateRef) => [\n  read(state),\n  calc((upd, scope, {a}) => a, true),\n]\n\nconst syncSourceState = (\n  source: DataCarrier,\n  target: DataCarrier | DataCarrier[],\n  clock: DataCarrier | DataCarrier[],\n  clockState: StateRef,\n  method: string,\n) => {\n  const isSourceStore = is.store(source)\n  const sourceRef = isSourceStore ? getStoreState(source) : createStateRef()\n  const hasSource = createStateRef(isSourceStore)\n  if (!isSourceStore) {\n    createNode({\n      parent: source,\n      node: [\n        mov({from: STACK, target: sourceRef}),\n        mov({from: VALUE, store: true, target: hasSource}),\n      ],\n      family: {owners: [source, target, clock], links: target},\n      meta: {op: method},\n      regional: true,\n    })\n  }\n  applyTemplate('sampleSource', hasSource, sourceRef, clockState)\n  return [sourceRef, hasSource] as const\n}\n","import {getMeta, getOwners, getLinks} from '../getter'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport type {Store} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {STORE} from '../tag'\n\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    add(list, node)\n    if (getMeta(node, 'op') === STORE && getMeta(node, 'sid')) {\n      fn(node, getMeta(node, 'sid'))\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\nexport function normalizeValues(\n  values: Map<Store<any>, any> | Array<[any, any]> | Record<string, any>,\n  assertEach?: (key, value) => void,\n) {\n  if (Array.isArray(values)) values = new Map(values)\n  if (values instanceof Map) {\n    const result = {} as Record<string, any>\n    forEach(values, (value, key) => {\n      assert(is.unit(key), 'Map key should be a unit')\n      if (assertEach) assertEach(key, value)\n      assert(key.sid, 'unit should have a sid')\n      assert(!(key.sid! in result), 'duplicate sid found')\n      result[key.sid!] = value\n    })\n    return result\n  }\n  return values\n}\n","export const observableSymbol =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import {kind} from './index.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {Domain, Effect, Event, Scope, Store} from './unit.h'\n\nexport const unit = obj => (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: kind) => obj => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value) => value is Store<unknown>\nexport const event = is(EVENT) as (value) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value) => value is Domain\nexport const scope = is(SCOPE) as (value) => value is Scope\n","import type {Node, StateRef, NodeUnit} from './index.h'\nimport type {Scope, Store, CommonUnit, Domain} from './unit.h'\n\nexport const getGraph = (graph: NodeUnit): Node =>\n  (graph as {graphite: Node}).graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: Store<any>): StateRef => store.stateRef\nexport const getValue = stack => stack.value\nexport const getSubscribers = (store: Store<any>) => store.subscribers\nexport const getParent = unit => unit.parent\nexport const getForkPage = (val): Scope | void => val.scope\nexport const getMeta = (unit: NodeUnit, field: string) =>\n  getGraph(unit).meta[field]\nexport const setMeta = (unit: NodeUnit, field: string, value: unknown) =>\n  (getGraph(unit).meta[field] = value)\nexport const getCompositeName = (unit: CommonUnit | Domain) =>\n  unit.compositeName\n","const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","import type {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\nimport {add, forEach} from './collection'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  forEach(links, _link => {\n    const link = getGraph(_link)\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    add(getOwners(link), owner)\n    add(getLinks(owner), link)\n  })\n}\n","export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert, deprecate} from './throw'\nimport {arrifyNodes} from './createNode'\nimport type {NodeUnit} from './index.h'\nimport {getMeta} from './getter'\n\nexport const isObject = value => typeof value === 'object' && value !== null\nexport const isFunction = value => typeof value === 'function'\n\nexport const isVoid = value => value === undefined\n\nexport const assertObject = value =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value,\n  method: string,\n  valueName: string,\n  reason: string,\n) =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (value, method: string, valueName: string) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n\nexport const assertTarget = (\n  method: string,\n  target: NodeUnit | NodeUnit[],\n  targetField: string = 'target',\n) =>\n  forEach(arrifyNodes(target), item =>\n    deprecate(\n      !getMeta(item, 'derived'),\n      `${method}: derived unit in \"${targetField}\"`,\n      `createEvent/createStore`,\n    ),\n  )\n","import type {Stack} from './kernel'\n\nexport const callStackAReg = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(stack, a)\nexport const callARegStack = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: {[key: string]: any}, _: Stack) =>\n  fn(stack)\n","import type {\n  StateRef,\n  Compute,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {EFFECT, REG_A, SAMPLER, STACK, STORE} from './tag'\nimport type {BarrierPriorityTag, Stack} from './kernel'\nimport {callStack} from './caller'\n\nconst cmd = (\n  type: 'compute' | 'mov',\n  data,\n  priority?: BarrierPriorityTag | false,\n  batch?: boolean,\n) => {\n  const result = {\n    id: nextStepID(),\n    type,\n    data,\n  }\n  if (priority) {\n    result.order = {priority}\n    if (batch) result.order.barrierID = ++nextBarrierID\n  }\n  return result\n}\n\nlet nextBarrierID = 0\n\nexport const mov: {\n  <T>(data: {\n    from: 'value'\n    store: T\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToRegister<T>\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    store: StateRef\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovStoreToStore\n  (data: {\n    store: StateRef\n    to: 'stack' | 'a' | 'b'\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  (data: {\n    store: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n  batch,\n  priority,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n}) => cmd('mov', {from, store, to, target}, priority, batch)\n\nexport const compute = ({\n  fn,\n  batch,\n  priority,\n  safe = false,\n  filter = false,\n  pure = false,\n}: {\n  fn?: (data, scope: {[key: string]}, stack: Stack) => any\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n  safe?: boolean\n  filter?: boolean\n  pure?: boolean\n}): Compute => cmd('compute', {fn, safe, filter, pure}, priority, batch)\n\nexport const filter = ({\n  fn,\n  pure,\n}: {\n  fn(data, scope: {[key: string]}, stack: Stack)\n  pure?: boolean\n}) => compute({fn, filter: true, pure})\n\nexport const run = ({fn}: {fn(data, scope: {[key: string]}, stack: Stack)}) =>\n  compute({fn, priority: EFFECT})\n\nexport const calc = (\n  fn: (data, scope: {[key: string]}, stack: Stack) => any,\n  filter?: boolean,\n  isEffect?: boolean,\n) => compute({fn, safe: true, filter, priority: isEffect && EFFECT})\n\n/**\n * `read(ref, true, true)`: **reg.stack** with **sampler** batch\n *\n * `read(ref, true, false)`: **reg.stack** without batch\n *\n * `read(ref, false, true)`: **reg.a** with **sampler** batch\n *\n * `read(ref, false, false)`: **reg.a** without batch\n *\n */\nexport const read = (\n  store: StateRef,\n  toStack?: boolean,\n  samplerPriority?: boolean,\n) =>\n  mov({\n    store,\n    to: toStack ? STACK : REG_A,\n    priority: samplerPriority && SAMPLER,\n    batch: true,\n  })\n\nexport const userFnCall = (\n  fn: (data, scope: {[key: string]}, stack: Stack) => any = callStack,\n  isFilter?: boolean,\n) => compute({fn, pure: true, filter: isFilter})\n\nexport const step = {mov, compute, filter, run}\n","import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\nimport {add} from './collection'\n\nexport const createStateRef = (current?): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  add(ref.before!, op as any)\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-expect-error\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && getMeta(targetNode, 'op') !== 'sample') ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: Map<any, any> | Set<any>) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-expect-error\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import type {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n","import {processArgsToConfig} from './config'\nimport {createNode} from './createNode'\nimport type {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet, assertTarget} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit | NodeUnit[],\n  child: NodeUnit | NodeUnit[],\n  node?: Array<Cmd | false | void | null>,\n  op?: string,\n  scopeFn?: Function,\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope: {fn: scopeFn},\n    meta: {op},\n    family: {owners: [parent, child], links: child},\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  const method = 'forward'\n  const [{from, to}, config] = processArgsToConfig(opts, true)\n  assertNodeSet(from, method, '\"from\"')\n  assertNodeSet(to, method, '\"to\"')\n  assertTarget(method, to, 'to')\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta: {op: method, config},\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {run} from './step'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assert} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload) => any,\n): Subscription => {\n  assert(isFunction(handler), '.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {owners: unit},\n      regional: true,\n    }),\n  )\n}\n","import type {DataCarrier} from './unit.h'\nimport type {Cmd} from './index.h'\nimport {is, isFunction, isObject, assertTarget} from './is'\nimport {add, forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {compute, userFnCall, calc, read} from './step'\nimport {createNode} from './createNode'\nimport {launch, Stack} from './kernel'\nimport {getStoreState} from './getter'\nimport {assert} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\nimport {createSampling} from './sample'\n\nconst launchCase = (\n  scopeTargets: Record<string, DataCarrier>,\n  field: string,\n  data: any,\n  stack: Stack,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args) {\n  const METHOD = 'split'\n  let targets: Record<string, DataCarrier>\n  let clock: void | DataCarrier | DataCarrier[]\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const configForm = !match\n  if (configForm) {\n    targets = source.cases\n    match = source.match\n    clock = source.clock\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  if (!targets!) targets = {}\n  if (!configForm) {\n    assert(matchIsShape, 'match should be an object')\n    forIn(\n      match,\n      (_, key) =>\n        (targets[key] = createEvent({\n          derived: true,\n          and: metadata,\n        })),\n    )\n    targets.__ = createEvent({derived: true, and: metadata})\n  } else {\n    forIn(targets, (target, field) =>\n      assertTarget(METHOD, target, `cases.${field}`),\n    )\n  }\n  const owners = new Set(\n    ([] as DataCarrier[]).concat(source, clock || [], Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && read(getStoreState(match), false, true),\n      compute({\n        safe: matchIsUnit,\n        filter: true,\n        pure: !matchIsUnit,\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        add(units, key)\n        owners.add(storeOrFn)\n        const updater = createLinkNode(\n          storeOrFn,\n          [],\n          [read(lastValues), calc((upd, _, {a}) => (a[key] = upd))],\n        )\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {from: storeRef, field: key, type: 'field'})\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && read(lastValues, false, true),\n      userFnCall((data, scopeTargets, stack) => {\n        for (let i = 0; i < caseNames.length; i++) {\n          const caseName = caseNames[i]\n          const caseValue = includes(units, caseName)\n            ? stack.a[caseName]\n            : match[caseName](data)\n          if (caseValue) {\n            launchCase(scopeTargets, caseName, data, stack)\n            return\n          }\n        }\n        launchCase(scopeTargets, '__', data, stack)\n      }, true),\n    ]\n  } else {\n    assert(false, 'expect match to be unit, function or object')\n  }\n  const splitterNode = createNode({\n    meta: {op: METHOD},\n    parent: clock ? [] : source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {owners: Array.from(owners)},\n    regional: true,\n  })\n  if (clock) {\n    createSampling(\n      METHOD,\n      clock,\n      source,\n      null,\n      splitterNode,\n      null,\n      METHOD,\n      metadata,\n      /* non-batched */\n      false,\n      false,\n      false,\n    )\n  }\n  if (!configForm) return targets\n}\n","import {add} from '../collection'\nimport {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\n\nexport function allSettled(\n  start,\n  {scope, params: ctx}: {scope: Scope; params?},\n) {\n  if (!is.unit(start))\n    return Promise.reject(Error('first argument should be unit'))\n  const defer = createDefer()\n  //@ts-expect-error\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  add(fxCount.scope.defers, defer)\n\n  const launchUnits = [start]\n  const launchParams = [] as Array<{params; req} | null>\n  add(\n    launchParams,\n    is.effect(start)\n      ? {\n          params: ctx,\n          req: {\n            rs(value) {\n              //@ts-expect-error\n              defer.value = {status: 'done', value}\n            },\n            rj(value) {\n              //@ts-expect-error\n              defer.value = {status: 'fail', value}\n            },\n          },\n        }\n      : ctx,\n  )\n  add(launchUnits, fxCount)\n  add(launchParams, null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    scope,\n  })\n  return defer.req\n}\n","import type {Domain} from './unit.h'\nimport {combine} from './combine'\nimport {createEffect, onSettled, runFn} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {processArgsToConfig} from './config'\nimport {\n  getGraph,\n  getParent,\n  getStoreState,\n  setMeta,\n  getCompositeName,\n} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {read, calc} from './step'\nimport {launch} from './kernel'\nimport {EFFECT} from './tag'\nimport {createName} from './naming'\n\nexport function attach(config) {\n  let injected\n  ;[config, injected] = processArgsToConfig(config, true)\n  let {source, effect, mapParams} = config\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFnStep = calc(\n    (upd, _, stack) => {\n      const {params, req, handler} = upd\n      const anyway = attached.finally\n      const rj = onSettled(params, req, false, anyway, stack)\n      const sourceData = stack.a\n      const isEffectHandler = is.effect(handler)\n      let ok = true\n      let computedParams\n      if (mapParams) {\n        ;[ok, computedParams] = runFn(mapParams, rj, [params, sourceData])\n      } else {\n        computedParams = source && isEffectHandler ? sourceData : params\n      }\n      if (ok) {\n        if (isEffectHandler) {\n          launch({\n            target: handler as any,\n            params: {\n              params: computedParams,\n              req: {rs: onSettled(params, req, true, anyway, stack), rj},\n            },\n            page: stack.page,\n            defer: true,\n          })\n        } else {\n          upd.args = [sourceData, computedParams]\n          return true\n        }\n      }\n    },\n    true,\n    true,\n  )\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(state, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [read(getStoreState(state)), runnerFnStep]\n  } else {\n    runnerSteps = [runnerFnStep]\n  }\n  runner.seq.splice(1, 0, ...runnerSteps)\n  attached.use(effect)\n  const parentDomain: Domain | void = getParent(effect)\n  if (parentDomain) {\n    Object.assign(\n      getCompositeName(attached),\n      createName(attached.shortName, parentDomain),\n    )\n    //@ts-expect-error\n    attached.defaultConfig.parent = parentDomain\n  }\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import type {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import type {Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createStore,\n  createNamedEvent,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {createLinkNode} from './forward'\nimport {add, forEach, forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {calc} from './step'\n\nexport function createDomain(nameOrConfig, maybeConfig?): Domain {\n  const node = createNode({family: {type: DOMAIN}, regional: true})\n\n  const result = {\n    history: {},\n    graphite: node,\n    hooks: {},\n  }\n\n  node.meta = initUnit(DOMAIN, result, nameOrConfig, maybeConfig)\n\n  forIn(\n    {\n      Event: createEvent,\n      Effect: createEffect,\n      Store: createStore,\n      Domain: createDomain,\n    },\n    (factory, tag) => {\n      const lowerCaseTag = tag.toLowerCase()\n\n      const trigger = createNamedEvent(`on${tag}`)\n      result.hooks[lowerCaseTag] = trigger\n\n      const acc = new Set<any>()\n      result.history[`${lowerCaseTag}s`] = acc\n\n      trigger.create = res => {\n        launch(trigger, res)\n        return res\n      }\n      add(\n        getGraph(trigger).seq,\n        calc((upd, _, stack) => {\n          stack.scope = null\n          return upd\n        }),\n      )\n      trigger.watch(data => {\n        own(result, [data])\n        acc.add(data)\n        if (!data.ownerSet) data.ownerSet = acc\n        if (!getParent(data)) data.parent = result\n      })\n      own(result, [trigger])\n\n      result[`onCreate${tag}`] = (hook: (data) => any) => {\n        forEach(acc, hook)\n        return trigger.watch(hook)\n      }\n      result[`create${tag}`] = result[lowerCaseTag] = (\n        nameOrConfig,\n        config?: Config,\n      ) => trigger(factory(nameOrConfig, {parent: result, or: config}))\n    },\n  )\n\n  const parent = getParent(result)\n  if (parent) {\n    forIn(result.hooks, (from: NodeUnit, key) =>\n      createLinkNode(from, parent.hooks[key]),\n    )\n  }\n  return result\n}\n","import {is} from '../is'\nimport {assert} from '../throw'\nimport type {Domain} from '../unit.h'\nimport {normalizeValues} from './util'\nimport {createScope} from './createScope'\n\nexport function fork(\n  domainOrConfig?: Domain | {values?; handlers?},\n  optiionalConfig?: {values?; handlers?},\n) {\n  let config: {values?; handlers?} | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optiionalConfig\n  }\n\n  const scope = createScope(domain!)\n\n  if (config) {\n    if (config.values) {\n      const valuesSidMap = normalizeValues(config.values, unit =>\n        assert(is.store(unit), 'Values map can contain only stores as keys'),\n      )\n      Object.assign(scope.sidValuesMap, valuesSidMap)\n    }\n    if (config.handlers) {\n      scope.handlers = normalizeValues(config.handlers, unit =>\n        assert(\n          is.effect(unit),\n          `Handlers map can contain only effects as keys`,\n        ),\n      )\n    }\n  }\n  return scope\n}\n","import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {calc, compute} from '../step'\nimport type {Domain, Scope} from '../unit.h'\nimport type {StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, SCOPE} from '../tag'\n\nexport function createScope(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      calc((_, scope, stack) => {\n        if (!getParent(stack)) {\n          scope.fxID += 1\n          return\n        }\n        if (getMeta(getParent(stack).node, 'needFxCounter') === 'dec') {\n          scope.inFlight -= 1\n        } else {\n          scope.inFlight += 1\n          scope.fxID += 1\n        }\n      }),\n      compute({priority: SAMPLER, batch: true}),\n      calc(\n        (_, scope) => {\n          const {defers, fxID} = scope\n          if (scope.inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), defer => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n        false,\n        true,\n      ),\n    ],\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      calc((value, __, stack) => {\n        const storeStack = getParent(stack)\n        if (storeStack && getParent(storeStack)) {\n          const storeNode = storeStack.node\n          if (\n            !getMeta(storeNode, 'isCombine') ||\n            getMeta(getParent(storeStack).node, 'op') !== 'combine'\n          ) {\n            const forkPage = getForkPage(stack)!\n            const id = storeNode.scope.state.id\n            const sid = getMeta(storeNode, 'sid')\n            forkPage.sidIdMap[sid] = id\n            forkPage.sidValuesMap[sid] = value\n          }\n        }\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    sidValuesMap: {},\n    sidIdMap: {},\n    getState(store) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      const node = getGraph(store)\n      return getPageRef(currentPage, resultScope, node, node.scope.state, true)\n        .current\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {},\n    fxCount: forkInFlightCounter,\n    storeChange,\n  }\n  return resultScope\n}\n","import {observableSymbol} from './observable'\nimport type {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {assert} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  assert(observableItem.subscribe, 'expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {processArgsToConfig} from './config'\nimport {validateSampleConfig, createSampling} from './sample'\n\nexport function guard(...args) {\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  validateSampleConfig(config, 'guard')\n  return createSampling(\n    'guard',\n    config.clock,\n    source,\n    config.filter,\n    config.target,\n    null,\n    config.name,\n    metadata,\n    !config.greedy,\n    false,\n    true,\n  )\n}\n","import {is, isObject} from '../is'\nimport {assert} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, includes} from '../collection'\nimport {normalizeValues, traverseStores} from './util'\nimport {getGraph} from '../getter'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values}) {\n  assert(isObject(values), 'values property should be an object')\n  const normalizedValues = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(normalizedValues)\n  const storeNodes: Node[] = []\n  const storeValues = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  let needToAssign: true | void\n  if (is.scope(domain)) {\n    forkPage = domain\n    needToAssign = true\n    assert(forkPage.cloneOf, 'scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    assert(false, 'first argument of hydrate should be domain or scope')\n  }\n  traverseStores(traverseTarget!, (node, sid) => {\n    // forkPage.sidIdMap[sid] = node.scope.state.id\n    if (includes(valuesSidList, sid)) {\n      add(storeNodes, node)\n      add(storeValues, normalizedValues[sid])\n    }\n  })\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    scope: forkPage!,\n  })\n  if (needToAssign) {\n    Object.assign(forkPage!.sidValuesMap, normalizedValues)\n  }\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {createLinkNode} from './forward'\nimport {deprecate} from './throw'\n\nexport function restore(obj, defaultState, config?) {\n  if (is.store(obj)) {\n    deprecate(false, 'restore($store)')\n    return obj\n  }\n  if (is.event(obj) || is.effect(obj)) {\n    const domain = getParent(obj)\n    const result = createStore(defaultState, {\n      parent: domain,\n      name: obj.shortName,\n      and: config,\n    })\n    createLinkNode(is.effect(obj) ? obj.doneData : obj, result)\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(\n    obj,\n    (value, key) =>\n      (result[key] = is.store(value) ? value : createStore(value, {name: key})),\n  )\n  return result\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\n\n/** bind event to scope */\nexport function scopeBind(unit, {scope}: {scope?: Scope} = {}) {\n  assert(\n    scope || forkPage,\n    'scopeBind cannot be called outside of forked .watch',\n  )\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? params => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          scope: savedForkPage,\n        })\n        return req.req\n      }\n    : params => {\n        launch({target: unit, params, scope: savedForkPage})\n        return params\n      }\n}\n","import type {Scope, Store} from '../unit.h'\nimport {forIn, includes} from '../collection'\nimport {assert} from '../throw'\nimport {traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  config: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  const ignoredStores = config.ignore ? config.ignore.map(({sid}) => sid) : []\n  const result = {} as Record<string, any>\n  forIn(scope.sidValuesMap, (value, sid) => {\n    if (includes(ignoredStores, sid)) return\n    const id = scope.sidIdMap[sid]\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = scope.reg[id].current\n    } else {\n      result[sid] = value\n    }\n  })\n  if ('onlyChanges' in config && !config.onlyChanges) {\n    assert(scope.cloneOf, 'scope should be created from domain')\n    traverseStores(getGraph(scope.cloneOf), (node, sid) => {\n      if (\n        !(sid in result) &&\n        !includes(ignoredStores, sid) &&\n        !getMeta(node, 'isCombine') &&\n        getMeta(node, 'serialize') !== 'ignore'\n      )\n        result[sid] = scope.getState(node as any)\n    })\n  }\n  return result\n}\n"],"names":["forIn","obj","cb","key","forEach","list","fn","assert","condition","message","Error","withRegion","unit","regionStack","parent","value","template","getMeta","readTemplate","sidRoot","getParent","createNode","node","child","to","target","scope","meta","family","familyRaw","type","regional","sources","arrifyNodes","from","source","links","owners","seq","item","add","result","id","nextNodeID","next","link","getOwners","owner","getLinks","own","getValue","launch","payload","upsert","pageForLaunch","currentPage","stackForLaunch","forkPageForLaunch","forkPage","params","defer","page","getForkPage","Array","isArray","i","length","pushFirstHeapItem","getGraph","isRoot","stop","skip","reg","lastStartedState","isWatch","isPure","idx","stack","hasPageReg","hasScopeReg","local","fail","stepn","step","order","priority","barrierID","fullID","barriers","has","pushHeap","delete","data","STACK","store","pageForRef","getPageForRef","initRefInScope","softRead","undefined","readRef","getPageRef","current","pure","computationResult","safe","tryRun","filter","finalValue","nextNode","fxCount","storeChange","additionalLinks","deleteMin","unitObjectName","objOrArr","method","name","comma","is","getCompositeName","fullName","toString","createName","path","shortName","composite","concat","processArgsToConfig","args","singleArgument","rawConfig","assertObject","metadata","or","childConfig","and","unwrappedNestedValue","isObject","nested","applyTemplate","handlers","callCreate","oldPage","setCurrentPage","create","createEvent","nameOrConfig","maybeConfig","event","deprecate","Object","assign","graphite","initUnit","watch","watchUnit","map","deriveEvent","MAP","userFnCall","callStack","filterMap","calc","isVoid","prepend","contramapped","createLinkNode","applyParentHook","createStore","defaultState","props","plainState","createStateRef","updates","createNamedEvent","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","setState","state","reset","units","on","nodeSet","assertNodeSet","trigger","off","getSubscribers","set","createSubscription","updateStore","callARegStack","currentSubscription","get","firstState","config","lastResult","storeState","innerStore","derived","linkNode","callStackAReg","addRefOp","getStoreState","noInit","eventOrFn","subscription","isFunction","updateFilter","defaultConfig","upd","_","b","read","a","mov","sid","setMeta","combine","handler","stores","structStoreShape","shapeReady","noArraySpread","rawHandler","slice","storeCombination","createDefer","req","Promise","rs","rj","catch","createEffect","instance","kind","use","runner","getCurrent","anyway","finally","done","named","status","error","doneData","failData","handlerId","getType","scope_","handler_","onResolve","onSettled","onReject","runFn","then","op","fx","savedFork","setForkPage","inFlight","x","pending","amount","merge","validateSampleConfig","atLeastOneFieldExists","sampleConfigFields","field","fieldErrorMessage","traverseStores","root","visit","includes","normalizeValues","values","assertEach","observableSymbol","Symbol","observable","effect","domain","removeItem","pos","indexOf","splice","push","subject","suggestion","console","graph","val","compositeName","idCount","nextUnitID","nextStepID","readSidRoot","ownerUnit","_link","flat","assertNodeSetItem","valueName","reason","assertTarget","targetField","cmd","batch","nextBarrierID","compute","run","isEffect","toStack","samplerPriority","isFilter","ref","before","heap","v","getPriority","ret","r","l","queue","ix","first","last","size","bucket","t","Set","newForkPage","newPage","isGetState","sourceRef","isKernelCall","refsMap","sidValuesMap","sidIdMap","isFresh","needToAssign","err","flattenConfig","part","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","clearNode","ownerSet","history","events","effects","domains","unsubscribe","scopeFn","hookType","hooks","configA","configB","isDomain","unitId","serialize","thru","subscribe","observer","nativeTemplate","mapped","caller","storeRef","reader","needSpread","clone","stateNew","rawShape","storeStateRef","rawShapeReader","c","childRef","defaultShape","ok","sidechain","createSampling","clock","batched","targetMayBeStore","filterRequired","isUpward","sourceIsClock","filterType","clockState","filterNodes","syncSourceState","filterRef","readAndFilter","hasSource","src","isSourceStore","launchCase","scopeTargets","start","ctx","reject","parentFork","defers","launchUnits","launchParams","mapParams","attached","runnerSteps","runnerFnStep","computedParams","sourceData","isEffectHandler","parentDomain","setters","createDomain","Event","Effect","Store","Domain","factory","tag","lowerCaseTag","toLowerCase","acc","res","hook","domainOrConfig","optiionalConfig","forkInFlightCounter","fxID","resolve","__","storeStack","storeNode","resultScope","cloneOf","createScope","valuesSidMap","opts","observableItem","disposer","complete","greedy","traverseTarget","normalizedValues","valuesSidList","getOwnPropertyNames","storeNodes","storeValues","savedForkPage","ignoredStores","ignore","onlyChanges","rawName","targets","METHOD","match","configForm","cases","matchIsUnit","matchIsFunction","matchIsShape","splitterSeq","caseNames","keys","String","lastValues","needBarrier","storeOrFn","updater","caseName","splitterNode","loc"],"mappings":"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"}