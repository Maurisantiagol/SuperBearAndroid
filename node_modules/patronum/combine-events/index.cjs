"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineEvents = combineEvents;

var _effector = require("effector");

function combineEvents({
  events,
  reset,
  target = (0, _effector.createEvent)({
    name: "target",
    sid: "3pez5"
  })
}) {
  if (!_effector.is.unit(target)) throwError('target should be a unit');
  if (reset && !_effector.is.unit(reset)) throwError('reset should be a unit');
  (0, _effector.withRegion)(target, () => {
    const keys = Object.keys(events);
    const defaultShape = Array.isArray(events) ? [...keys].fill('') : {};
    const $counter = (0, _effector.createStore)(keys.length, {
      name: "$counter",
      sid: "-dszn9a"
    });
    const $results = (0, _effector.createStore)(defaultShape, {
      name: "$results",
      sid: "boz3x7"
    });
    $counter.reset((0, _effector.sample)({
      and: [target],
      or: {
        sid: "-8yzcn6"
      }
    }));
    $results.reset(target);

    if (reset) {
      $counter.reset((0, _effector.sample)({
        and: [reset],
        or: {
          sid: "-72suil"
        }
      }));
      $results.reset(reset);
    }

    for (const key of keys) {
      const $isDone = (0, _effector.createStore)(false, {
        name: "$isDone",
        sid: "ucs7nc"
      }).on(events[key], () => true).reset(target);

      if (reset) {
        $isDone.reset(reset);
      }

      $counter.on($isDone, value => value - 1);
      $results.on(events[key], (shape, payload) => {
        const newShape = Array.isArray(shape) ? [...shape] : { ...shape
        };
        newShape[key] = payload;
        return newShape;
      });
    }

    (0, _effector.guard)({
      and: [{
        source: (0, _effector.sample)({
          and: [$results, (0, _effector.merge)(Object.values(events), {
            name: "and",
            sid: "-l8g4ey"
          })],
          or: {
            name: "source",
            sid: "uf92v9"
          }
        }),
        filter: $counter.map(value => value === 0),
        target
      }],
      or: {
        sid: "ciekm0"
      }
    });
  });
  return target;
}

function throwError(message) {
  throw new Error(message);
}