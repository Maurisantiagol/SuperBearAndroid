import { Event, Unit } from 'effector';
declare type NoInfer<T> = [T][T extends any ? 0 : never];
declare type EventAsReturnType<Payload> = any extends Payload ? Event<Payload> : never;
export declare function spread<Payload>(config: {
    targets: {
        [Key in keyof Payload]?: Unit<Payload[Key]>;
    };
}): EventAsReturnType<Partial<Payload>>;
export declare function spread<Source, Payload extends Source extends Unit<infer S> ? S : never>(config: {
    source: Source;
    targets: {
        [Key in keyof Payload]?: Unit<NoInfer<Payload[Key]>>;
    };
}): Source;
export {};
