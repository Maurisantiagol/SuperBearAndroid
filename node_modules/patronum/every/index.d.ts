import { Store } from 'effector';
export declare function every<T>(_: {
    predicate: Store<T>;
    stores: Array<Store<T>>;
}): Store<boolean>;
export declare function every<T>(_: {
    predicate: (value: T) => boolean;
    stores: Array<Store<T>>;
}): Store<boolean>;
export declare function every<T extends string>(_: {
    predicate: T;
    stores: Array<Store<T>>;
}): Store<boolean>;
export declare function every<T>(_: {
    predicate: T;
    stores: Array<Store<T>>;
}): Store<boolean>;
export declare function every<T>(stores: Store<T>[], predicate: Store<T>): Store<boolean>;
export declare function every<T>(stores: Store<T>[], predicate: T): Store<boolean>;
export declare function every<T>(stores: Store<T>[], predicate: (value: T) => boolean): Store<boolean>;
